import "tfplan/v2" as tfplan
import "strings"
import "http"
import "json"

param provider

req = http.request("http://sentinel-data.kcochran.azure.hashidemos.io:8080/tags")
res = json.unmarshal(http.get(req).body)
mandatory_tags = res


get_resources = func(resource_type) {
    resources = []
    for tfplan.planned_values.resources as r {
        if tfplan.planned_values.resources[r].type == resource_type {
            append(resources, r)
        }
    }
    return resources
}

has_tags = func(resources, tags) {
    assigned_tags = []
    empty_tags = []
    missing_tags = []
    retval = false

    for resources as r {
        if "tags" in tfplan.planned_values.resources[r].values {
            if tfplan.planned_values.resources[r].values["tags"] == null {
                retval = false
            } else {
                for tfplan.planned_values.resources[r].values["tags"] as tag {
                    val = tfplan.planned_values.resources[r].values["tags"][tag]
                    if val == "" or val == null {
                        append(empty_tags, tag)
                    } else {
                        append(assigned_tags, tag)
                    }
                }
            }
        }
    }

    for tags as t {
        if t not in assigned_tags {
            append(missing_tags, t)
        }
    }

    if length(missing_tags) > 0 {
        print("The following mandatory tags are missing or empty:")
        for missing_tags as i {
            print("  " + i)
        }
        retval = false
    } else {
        retval = true
    }

    return retval
}

result = false
vm_resources = ""
if provider == "aws" {
    vm_resources = "aws_instance"
} else if provider == "azurerm" {
    vm_resources = "azurerm_virtual_machine"
} else {
    result = true
}

if vm_resources != "" {
    selected_resources = get_resources(vm_resources)
    result = has_tags(selected_resources, mandatory_tags)
} else {
    print("This policy is for a different provider and will not be processed")
    result = true
}

main = rule { result }
