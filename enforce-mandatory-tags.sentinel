import "tfplan/v2" as tfplan
import "strings"
import "http"
import "json"

param provider

mandatory_tags = [
    "environment",
    "department",
]

get_resources = func(resource_type) {
    resources = []
    for tfplan.planned_values.resources as r {
        if tfplan.planned_values.resources[r].type == resource_type {
            append(resources, r)
        }
    }
    return resources
}

has_tags = func(resources, tags) {
    assigned_tags = []
    empty_tag = []
    retval = false

    for resources as r {
        if "tags" in tfplan.planned_values.resources[r].values {
            if tfplan.planned_values.resources[r].values["tags"] == null {
                retval = false
            } else {
                for tfplan.planned_values.resources[r].values["tags"] as tag {
                    val = tfplan.planned_values.resources[r].values["tags"][tag]
                    if val == "" or val == null {
                        append(empty_tag, tag)
                    } else {
                        append(assigned_tags, tag)
                    }
                }
            }
        }
    }

    print("Tags:")
    for assigned_tags as t {
        print("  " + t)
    }

    # if length(no_tag) > 0 {
    #     print("The following mandatory tags are missing:")
    #     for no_tag as i {
    #         print("  " + i)
    #     }
    #     retval = false
    # } else {
    #     retval = true
    # }

    return retval
}

result = false
vm_resources = ""
if provider == "aws" {
    vm_resources = "aws_instance"
} else if provider == "azurerm" {
    vm_resources = "azurerm_virtual_machine"
} else {
    result = true
}

if vm_resources != "" {
    selected_resources = get_resources(vm_resources)
    result = has_tags(selected_resources, mandatory_tags)
} else {
    print("This policy is for a different provider and will not be processed")
    result = true
}

main = rule { result }
