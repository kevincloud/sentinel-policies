import "tfplan/v2" as tfplan
import "strings"
import "http"
import "json"

param provider

mandatory_tags = [
    "environment",
    "department",
]

get_resources = func(resource_type) {
    resources = []
    for tfplan.planned_values.resources as r {
        if tfplan.planned_values.resources[r].type == resource_type {
            append(resources, r)
        }
    }
    return resources
}

has_tags = func(resources, tags) {
    retval = false
    for resources as r {
        if "tags" in tfplan.planned_values.resources[r].values {
            for tfplan.planned_values.resources[r].values["tags"] as t {
                print("Tag: " + t)
                # if strings.to_lower(v) == strings.to_lower(setting_name) {
                #     for tfplan.planned_values.resources[r].values[v] as x {
                #         print(v + ": ")
                #         print(x)
                #         if x["enabled"] {
                #             retval = true
                #         }
                #     }
                # }
            }
        } else {
            retval = false
        }
    }
    return retval
}

result = false
vm_resources = ""
if provider == "aws" {
    vm_resources = "aws_instance"
} else if provider == "azurerm" {
    vm_resources = "azurerm_virtual_machine"
} else {
    result = true
}

if vm_resources != "" {
    selected_resources = get_resources(vm_resources)
    result = has_tags(selected_resources, mandatory_tags)
} else {
    print("This policy is for a different provider and will not be processed")
    result = true
}

main = rule { result }
