import "tfplan/v2" as tfplan
import "strings"
import "http"
import "json"

param provider

get_resources = func(resource_type) {
    resources = []
    for tfplan.planned_values.resources as r {
        # print("Resource: " + tfplan.planned_values.resources[r].type)
        if tfplan.planned_values.resources[r].type == resource_type {
            append(resources, r)
        }
    }
    return resources
}

no_star_items = func(resources) {
    prohibited_items = []
    for resources as r {
        for tfplan.planned_values.resources[r].values as v {
            if v == "policy" {
                res = json.unmarshal(tfplan.planned_values.resources[r].values[v])
                for res["Statement"][0]["Action"] as a {
                    n = strings.split(a, ":")
                    if n[1] == "*" {
                        append(prohibited_items, n[0])
                    }
                }
            }
        }
    }
    if length(prohibited_items) > 0 {
        print("Full access (*) is prohibited in the following resources in your policy:")
        for prohibited_items as item {
            print("   " + item)
        }
        return false
    } else {
        return true
    }
}

get_policy_state = func() {
    req = http.request("http://sentinel-data.kcochran.azure.hashidemos.io:8080/no-star-access")
    res = json.unmarshal(http.get(req).body)
    enabled = res["no-star-access"]

    if enabled == "true" {
        return true
    } else {
        return false
    }
}

proceed = false
enabled = get_policy_state()

if provider == "aws" {
    if enabled {
        iam_roles = get_resources("aws_iam_policy")
        proceed = no_star_items(iam_roles)
    } else {
        print("This policy is disabled and will not be processed")
        proceed = true
    }
} else {
    print("This policy is for a different provider and will not be processed")
    proceed = true
}

main = rule { proceed }
