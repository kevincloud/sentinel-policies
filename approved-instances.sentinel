#
# Ensure workspace is not using compute instances 
# which are not approved.
#

##### Imports #####

import "tfplan/v2" as tfplan
import "http"
import "json"
import "strings"

param provider
param base_url

##### Functions #####

# Get all VMs from all modules
get_compute_instances = func(prov) {
    resource = ""
    if prov == "aws" {
        resource = "aws_instance"
    } else if prov == "azurerm" {
        resource = "azurerm_virtual_machine"
    }

    all_vms = filter tfplan.resource_changes as _, res {
        res.mode is "managed" and
        res.type is resource
    }

    return all_vms
}

# Allowed Types
get_approved_list = func() {
    req = http.request(base_url + "/list/approved-instances/" + provider)
    res = json.unmarshal(http.get(req).body)
    allowed_types_orig = res

    # Convert to lower case
    allowed_types = []
    for allowed_types_orig as a {
        append(allowed_types, strings.to_lower(a))
    }
    return allowed_types
}

# Rule to restrict instance types
instance_type_allowed = func(vms, types, prov) {
    for vms as _, vm {
        if vm.change.after is not null {
            vmsize = ""
            vmlabel = ""
            vmname = ""
            if prov == "azurerm" {
                vmsize = strings.to_lower(vm.change.after.vm_size)
                vmlabel = vm.change.after.vm_size
                vmname = "VM"
            } else if prov == "aws" {
                vmsize = strings.to_lower(vm.change.after.instance_type)
                vmlabel = vm.change.after.instance_type
                vmname = "Instance"
            }
            if vmsize not in types {
                print(vmname + " size of " + vmlabel + " is not allowed")
                return false
            }
        }
    }
    print("All declared VMs are in the approved list")
    return true
}

vm_list = get_compute_instances(provider)
allowed = get_approved_list()
is_allowed = instance_type_allowed(vm_list, allowed, provider)

# Main rule that requires other rules to be true
main = rule { is_allowed }
