# 
# This policy allows you to specify resources which are 
# not allowed to be created except for when they may be 
# created from mandatory modules.
# 
# For example: A workspace is required to use a standard 
# security group module from the private module registry. 
# However, that workspace may not create any other 
# security groups, whether explicitly or from another 
# module.
# 

import "tfplan/v2" as tfplan
import "tfconfig/v2" as tfconfig
import "strings"
import "http"
import "json"

param provider

# Get the list of prohibited resources
req = http.request("http://sentinel-data.kcochran.azure.hashidemos.io:8080/list/prohibited-resources/" + provider)
res = json.unmarshal(http.get(req).body)
prohibited_resources = res

# Get the list of required modules
req = http.request("http://sentinel-data.kcochran.azure.hashidemos.io:8080/list/required-modules/" + provider)
res = json.unmarshal(http.get(req).body)
required_modules = res

# Get all referenced modules
get_modules = func() {
    modules = []
    for tfconfig.module_calls as mod {
        # Get the short name of the module instead of the entire path.
        modname = tfconfig.module_calls[mod].name
        modaddr = "" + string(tfconfig.module_calls[mod].module_address)
        if modaddr != "" {
            modaddr = modaddr + "."
        }
        if modname in required_modules {
            # Prepend "module." due to sentinel nomenclature
            modmod = modaddr + "module." + mod
            # Add to list
            append(modules, modname)
        }
    }
    return modules
}

# Get the module list
module_list = get_modules()

# Get a list of violations
violations = filter tfplan.resource_changes as _, res {
    res.type in prohibited_resources
}

# violations = []
# if length(first_pass) is not 0 {
#     for first_pass as _, r {
        # if strings.has_suffix(r.module_address
        # modules = strings.split(r.module_address)
        # for required_modules as pr {
        #     if pr not in modules {
        #         if cnt == 0 {
        #             append(violations, r)
        #             cnt += 1
        #         }
        #     }
        # }
#     }
# }

if length(violations) is not 0 {
    print("The following resources cannot be created:")
    for violations as _, v {
        print("   " + v.type)
        print("   - " + v.module_address)
    }
} else {
    print("No violations were found.")
}

# If the list if empty, we passed!
main = rule { length(violations) is 0 }
