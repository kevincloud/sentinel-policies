import "tfplan/v2" as tfplan
import "strings"
import "http"
import "json"

param provider
param base_url

get_resources = func(resource_type) {
    resources = []
    for tfplan.planned_values.resources as r {
        if tfplan.planned_values.resources[r].type == resource_type {
            append(resources, r)
        }
    }
    return resources
}

is_enc_enabled = func(resources, setting_name) {
    retval = false
    for resources as r {
        for tfplan.planned_values.resources[r].values as v {
            if strings.to_lower(v) == strings.to_lower(setting_name) {
                for tfplan.planned_values.resources[r].values[v] as x {
                    print(v + ": ")
                    print(x)
                    if x["enabled"] {
                        retval = true
                    }
                }
            }
        }
    }
    return retval
}

get_policy_state = func() {
    req = http.request(base_url + "/ddb-encryption")
    res = json.unmarshal(http.get(req).body)
    enabled = res["ddb-encryption"]

    if enabled == "true" {
        return true
    } else {
        return false
    }
}

proceed = false
enabled = get_policy_state()

if provider == "aws" {
    if enabled {
        ddb_tables = get_resources("aws_dynamodb_table")
        proceed = is_enc_enabled(ddb_tables, "server_side_encryption")
    } else {
        print("This policy is disabled and will not be processed")
        proceed = true
    }
} else {
    print("This policy is for a different provider and will not be processed")
    proceed = true
}

main = rule { proceed }
